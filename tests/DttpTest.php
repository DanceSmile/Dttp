<?php
use PHPUnit\Framework\TestCase;

require __DIR__."/../vendor/autoload.php";

/**
 * Generated by PHPUnit_SkeletonGenerator on 2018-04-29 at 17:28:17.
 */
class DttpTest extends TestCase
{
    /**
     * @var Pending
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
         DttpServer::start();
        $this->client =  \Dancesmile\Dttp::client([
            "base_uri" => "http://localhost:9090"
        ]);


    }

   
    
    /**
     * @covers Dancesmile\Pending::buildClient
     * @todo   Implement testBuildClient().
     */
    public function testBuildClient()
    {
        // Remove the following lines when you implement this test.
        $this->assertInstanceOf(
            \Dancesmile\Pending::class,
            $this->client
        );
    }

    /**
     * @covers Dancesmile\Pending::asString
     * @todo   Implement testAsString().
     */
    public function testAsString()
    {

        $response = $this->client->asString()->beforeSending(function($resquest, $option){

            $this->assertEquals("", $resquest->getHeaderLine("content-type"));

        })->post("/post","yu");

        $this->assertEquals($response->status(),2000);
        

    }

    /**
     * @covers Dancesmile\Pending::asJson
     * @todo   Implement testAsJson().
     */
    public function testAsJson()
    {
        $response = $this->client->asJson()->beforeSending(function($resquest, $option){

            $this->assertContains("application/json", $resquest->getHeaderLine("content-type"));

        })->post("/post",[
                "name" => "name" ,
                "contents" => "contents"
        ]);

        $this->assertEquals($response->status(),200);
    }

    /**
     * @covers Dancesmile\Pending::asFormParams
     * @todo   Implement testAsFormParams().
     */
    public function testAsFormParams()
    {
         $response = $this->client->asFormParams()->beforeSending(function($resquest, $option){


            $this->assertContains("application/x-www-form-urlencoded", $resquest->getHeaderLine("content-type"));

        })->post("/post",[
                "name" => "name" ,
                "contents" => "contents"
        ]);

        $this->assertEquals($response->status(),200);
    }

    /**
     * @covers Dancesmile\Pending::asMultipart
     * @todo   Implement testAsMultipart().
     */
    public function testAsMultipart()
    {

        $response = $this->client->asMultipart()->beforeSending(function($resquest, $option){

            $this->assertContains("multipart/form-data", $resquest->getHeaderLine("content-type"));

        })->post("/post",[
            [
                "name" => "name" ,
                "contents" => "contents"
            ]
        ]);

        $this->assertEquals($response->status(),200);

        
    }

   

    /**
     * @covers Dancesmile\Pending::timeout
     * @todo   Implement testTimeout().
     */
    public function testTimeout()
    {

        $response = $this->client->timeout(3)->get("/timeout");

        $this->assertEquals($response->status(),200);


    }

    /**
     * @covers Dancesmile\Pending::redirect
     * @todo   Implement testRedirect().
     */
    public function testRedirect()
    {
        $response = $this->client->get("/redirect")->body();

        $this->assertEquals($response,"Redirected!");

    }

    
    /**
     * @covers Dancesmile\Pending::accept
     * @todo   Implement testAccept().
     */
    public function testAccept()
    {

        $response = $this->client->accept("dttp")->beforeSending(function($resquest, $option){

            $this->assertEquals($resquest->getHeaderLine("accept"),"dttp");

        })->get("/get")->json();
        
    }

    /**
     * @covers Dancesmile\Pending::contentType
     * @todo   Implement testContentType().
     */
    public function testContentType()
    {
        $response = $this->client->contentType("text/html")->beforeSending(function($resquest, $option){


            $this->assertEquals($resquest->getHeaderLine("Content-Type"),"text/html");

        })->get("/get")->json();


        
    }

    /**
     * @covers Dancesmile\Pending::withHeaders
     * @todo   Implement testWithHeaders().
     */
    public function testWithHeaders()
    {

        $response = $this->client->withHeaders([
                 "dttp-version" => "1.0.0"
        ])->withHeaders([
                 "overwrite" => "already"
        ])->get("/get")->json();

        $this->assertArrayHasKey(
            "overwrite" 
        ,$response['headers']);
        $this->assertArrayHasKey(
            "dttp-version" 
        ,$response['headers']);

    }

    /**
     * @covers Dancesmile\Pending::withOptions
     * @todo   Implement testWithOptions().
     */
    public function testWithOptions()
    {
        $response = $this->client->withOptions([
            "headers" => [
                 "dttp-version" => "1.0.0"
            ]
        ])->withOptions([
            "headers" => [
                 "overwrite" => "already"
            ]
        ])->get("/get")->json();

        $this->assertArrayHasKey(
            "overwrite" 
        ,$response['headers']);
        $this->assertArrayNotHasKey(
            "dttp-version" 
        ,$response['headers']);

    }

    /**
     * @covers Dancesmile\Pending::get
     * @todo   Implement testGet().
     */
    public function testGet()
    {
        
        $response = $this->client->get("/get")->status();
        $this->assertEquals(
            $response,
            200
        );

    }

    /**
     * @covers Dancesmile\Pending::post
     * @todo   Implement testPost().
     */
    public function testPost()
    {
        $response = $this->client->post("/post")->status();
        $this->assertEquals(
            $response,
            200
        );

    }

    /**
     * @covers Dancesmile\Pending::patch
     * @todo   Implement testPatch().
     */
    public function testPatch()
    {
        $response = $this->client->patch("/patch")->status();
        $this->assertEquals(
            $response,
            200
        );

    }

    /**
     * @covers Dancesmile\Pending::put
     * @todo   Implement testPut().
     */
    public function testPut()
    {
        $response = $this->client->put("/put")->status();
        $this->assertEquals(
            $response,
            200
        );

    }

    /**
     * @covers Dancesmile\Pending::delete
     * @todo   Implement testDelete().
     */
    public function testDelete()
    {
        $response = $this->client->delete("/delete")->status();
        $this->assertEquals(
            $response,
            200
        );

    }

}


class DttpServer
{
    static function start()
    {
        $pid = exec('php -S ' . 'localhost:9090' . ' -t ./server/public > /dev/null 2>&1 & echo $!');
        while (@file_get_contents('http://localhost:9090'. '/get') === false) {
            usleep(1000);
        }
        register_shutdown_function(function () use ($pid) {
            exec('kill ' . $pid);
        });
    }
}
